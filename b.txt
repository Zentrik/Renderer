; Function Attrs: uwtable
define void @julia_findSceneIntersectionIntrinsics_5461({ float, [1 x <8 x i32>] }* noalias nocapture sret({ float, [1 x <8 x i32>] }) %0, [2 x [1 x [3 x float]]]* nocapture nonnull readonly align 4 dereferenceable(24) %1, [1 x [1 x { [1 x [3 x {}*]], {}* }]]* nocapture nonnull readonly align 8 dereferenceable(32) %2, float %3, float %4) #0 {
top:
  %5 = insertelement <8 x float> undef, float %4, i32 0
  %res.i = shufflevector <8 x float> %5, <8 x float> undef, <8 x i32> zeroinitializer
  %6 = bitcast [1 x [1 x { [1 x [3 x {}*]], {}* }]]* %2 to { i8*, i64, i16, i16, i32 }**
  %7 = load atomic { i8*, i64, i16, i16, i32 }*, { i8*, i64, i16, i16, i32 }** %6 unordered, align 8
  %8 = getelementptr inbounds { i8*, i64, i16, i16, i32 }, { i8*, i64, i16, i16, i32 }* %7, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = call i64 @j_steprange_last_5465(i64 signext 0, i64 signext 8, i64 signext %9) #0
  %11 = icmp slt i64 %10, 0
  br i1 %11, label %L467, label %L28.preheader

L28.preheader:                                    ; preds = %top
  %12 = bitcast { i8*, i64, i16, i16, i32 }* %7 to i8**
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds [2 x [1 x [3 x float]]], [2 x [1 x [3 x float]]]* %1, i64 0, i64 0, i64 0, i64 0
  %15 = load float, float* %14, align 4
  %16 = insertelement <8 x float> undef, float %15, i32 0
  %res.i120 = shufflevector <8 x float> %16, <8 x float> undef, <8 x i32> zeroinitializer
  %17 = getelementptr inbounds [1 x [1 x { [1 x [3 x {}*]], {}* }]], [1 x [1 x { [1 x [3 x {}*]], {}* }]]* %2, i64 0, i64 0, i64 0, i32 0, i64 0, i64 1
  %18 = bitcast {}** %17 to i8***
  %19 = load atomic i8**, i8*** %18 unordered, align 8
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds [2 x [1 x [3 x float]]], [2 x [1 x [3 x float]]]* %1, i64 0, i64 0, i64 0, i64 1
  %22 = load float, float* %21, align 4
  %23 = insertelement <8 x float> undef, float %22, i32 0
  %res.i117 = shufflevector <8 x float> %23, <8 x float> undef, <8 x i32> zeroinitializer
  %24 = getelementptr inbounds [1 x [1 x { [1 x [3 x {}*]], {}* }]], [1 x [1 x { [1 x [3 x {}*]], {}* }]]* %2, i64 0, i64 0, i64 0, i32 0, i64 0, i64 2
  %25 = bitcast {}** %24 to i8***
  %26 = load atomic i8**, i8*** %25 unordered, align 8
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds [2 x [1 x [3 x float]]], [2 x [1 x [3 x float]]]* %1, i64 0, i64 0, i64 0, i64 2
  %29 = load float, float* %28, align 4
  %30 = insertelement <8 x float> undef, float %29, i32 0
  %res.i114 = shufflevector <8 x float> %30, <8 x float> undef, <8 x i32> zeroinitializer
  %31 = getelementptr inbounds [2 x [1 x [3 x float]]], [2 x [1 x [3 x float]]]* %1, i64 0, i64 1, i64 0, i64 0
  %32 = load float, float* %31, align 4
  %33 = insertelement <8 x float> undef, float %32, i32 0
  %res.i113 = shufflevector <8 x float> %33, <8 x float> undef, <8 x i32> zeroinitializer
  %34 = getelementptr inbounds [2 x [1 x [3 x float]]], [2 x [1 x [3 x float]]]* %1, i64 0, i64 1, i64 0, i64 1
  %35 = load float, float* %34, align 4
  %36 = insertelement <8 x float> undef, float %35, i32 0
  %res.i112 = shufflevector <8 x float> %36, <8 x float> undef, <8 x i32> zeroinitializer
  %37 = getelementptr inbounds [2 x [1 x [3 x float]]], [2 x [1 x [3 x float]]]* %1, i64 0, i64 1, i64 0, i64 2
  %38 = load float, float* %37, align 4
  %39 = insertelement <8 x float> undef, float %38, i32 0
  %res.i111 = shufflevector <8 x float> %39, <8 x float> undef, <8 x i32> zeroinitializer
  %40 = getelementptr inbounds [1 x [1 x { [1 x [3 x {}*]], {}* }]], [1 x [1 x { [1 x [3 x {}*]], {}* }]]* %2, i64 0, i64 0, i64 0, i32 1
  %41 = bitcast {}** %40 to i8***
  %42 = load atomic i8**, i8*** %41 unordered, align 8
  %43 = load i8*, i8** %42, align 8
  %44 = insertelement <8 x float> undef, float %3, i32 0
  %res.i105 = shufflevector <8 x float> %44, <8 x float> undef, <8 x i32> zeroinitializer
  br label %L28

L28:                                              ; preds = %L445, %L28.preheader
  %.sroa.090.0 = phi <8 x i32> [ %.sroa.067.1, %L445 ], [ zeroinitializer, %L28.preheader ]
  %value_phi3 = phi i64 [ %76, %L445 ], [ 0, %L28.preheader ]
  %value_phi5 = phi <8 x i32> [ %value_phi16, %L445 ], [ zeroinitializer, %L28.preheader ]
  %value_phi6 = phi <8 x i32> [ %75, %L445 ], [ <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8>, %L28.preheader ]
  %value_phi8 = phi <8 x float> [ %value_phi17, %L445 ], [ %res.i, %L28.preheader ]
  %value_phi9 = phi <8 x float> [ %value_phi18, %L445 ], [ %res.i, %L28.preheader ]
  %value_phi10 = phi <8 x float> [ %value_phi19, %L445 ], [ %res.i, %L28.preheader ]
  %45 = shl i64 %value_phi3, 2
  %46 = getelementptr i8, i8* %13, i64 %45
  %ptr.i121 = bitcast i8* %46 to <8 x float>*
  %res.i122 = load <8 x float>, <8 x float>* %ptr.i121, align 4
  %47 = fsub fast <8 x float> %res.i122, %res.i120
  %48 = getelementptr i8, i8* %20, i64 %45
  %ptr.i118 = bitcast i8* %48 to <8 x float>*
  %res.i119 = load <8 x float>, <8 x float>* %ptr.i118, align 4
  %49 = fsub fast <8 x float> %res.i119, %res.i117
  %50 = getelementptr i8, i8* %27, i64 %45
  %ptr.i115 = bitcast i8* %50 to <8 x float>*
  %res.i116 = load <8 x float>, <8 x float>* %ptr.i115, align 4
  %51 = fsub fast <8 x float> %res.i116, %res.i114
  %52 = fmul fast <8 x float> %res.i113, %47
  %53 = fmul fast <8 x float> %res.i112, %49
  %54 = fmul fast <8 x float> %res.i111, %51
  %55 = fadd <8 x float> %52, %53
  %56 = fadd <8 x float> %55, %54
  %57 = fmul fast <8 x float> %47, %47
  %58 = fmul fast <8 x float> %49, %49
  %59 = fmul fast <8 x float> %51, %51
  %60 = fadd <8 x float> %57, %58
  %61 = fadd <8 x float> %60, %59
  %62 = getelementptr i8, i8* %43, i64 %45
  %ptr.i109 = bitcast i8* %62 to <8 x float>*
  %res.i110 = load <8 x float>, <8 x float>* %ptr.i109, align 4
  %63 = fmul fast <8 x float> %res.i110, %res.i110
  %64 = fmul contract <8 x float> %56, %56
  %65 = fsub fast <8 x float> %63, %61
  %66 = fadd fast <8 x float> %65, %64
  %res.i106 = fcmp fast ogt <8 x float> %66, zeroinitializer
  %67 = sext <8 x i1> %res.i106 to <8 x i32>
  %68 = bitcast <8 x i32> %67 to <8 x float>
  %69 = call i32 @llvm.x86.avx.vtestz.ps.256(<8 x float> %68, <8 x float> %68)
  %.not = icmp eq i32 %69, 0
  br i1 %.not, label %L419, label %L445

L419:                                             ; preds = %L28
  %70 = call <8 x float> @llvm.sqrt.v8f32(<8 x float> %66)
  %71 = fsub fast <8 x float> %56, %70
  %72 = fadd fast <8 x float> %70, %56
  %res.i103 = fcmp ogt <8 x float> %71, %res.i105
  %res.i102 = select <8 x i1> %res.i103, <8 x float> %71, <8 x float> %72
  %res.i98 = fcmp fast olt <8 x float> %res.i105, %res.i102
  %73 = and <8 x i1> %res.i98, %res.i106
  %res.i97 = fcmp fast olt <8 x float> %res.i102, %value_phi8
  %74 = and <8 x i1> %73, %res.i97
  %res.i96 = select <8 x i1> %74, <8 x float> %res.i102, <8 x float> %value_phi9
  %res.i94 = select <8 x i1> %74, <8 x i32> %value_phi6, <8 x i32> %value_phi5
  br label %L445

L445:                                             ; preds = %L419, %L28
  %.sroa.067.1 = phi <8 x i32> [ %res.i94, %L419 ], [ %.sroa.090.0, %L28 ]
  %value_phi16 = phi <8 x i32> [ %res.i94, %L419 ], [ %value_phi5, %L28 ]
  %value_phi17 = phi <8 x float> [ %res.i96, %L419 ], [ %value_phi8, %L28 ]
  %value_phi18 = phi <8 x float> [ %res.i96, %L419 ], [ %value_phi9, %L28 ]
  %value_phi19 = phi <8 x float> [ %res.i96, %L419 ], [ %value_phi10, %L28 ]
  %75 = add <8 x i32> %value_phi6, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %.not124 = icmp eq i64 %value_phi3, %10
  %76 = add i64 %value_phi3, 8
  br i1 %.not124, label %L467, label %L28

L467:                                             ; preds = %L445, %top
  %.sroa.064.0 = phi <8 x i32> [ zeroinitializer, %top ], [ %.sroa.067.1, %L445 ]
  %value_phi23 = phi <8 x float> [ %res.i, %top ], [ %value_phi19, %L445 ]
  %res.i93 = call float @llvm.vector.reduce.fmin.v8f32(<8 x float> %value_phi23)
  %.sroa.0.0..sroa_idx = getelementptr inbounds { float, [1 x <8 x i32>] }, { float, [1 x <8 x i32>] }* %0, i64 0, i32 0
  store float %res.i93, float* %.sroa.0.0..sroa_idx, align 32
  %.sroa.261.0..sroa_idx62 = getelementptr inbounds { float, [1 x <8 x i32>] }, { float, [1 x <8 x i32>] }* %0, i64 0, i32 1, i64 0
  store <8 x i32> %.sroa.064.0, <8 x i32>* %.sroa.261.0..sroa_idx62, align 32
  ret void
}
